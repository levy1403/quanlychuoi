
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  password: 'password',
  email: 'email',
  phone: 'phone',
  role: 'role',
  fullName: 'fullName',
  gender: 'gender',
  address: 'address',
  birthDate: 'birthDate',
  CCCD: 'CCCD',
  status: 'status',
  availabilityStatus: 'availabilityStatus',
  createdAt: 'createdAt',
  avatarUrl: 'avatarUrl',
  loyaltyPoints: 'loyaltyPoints',
  lastLoginAt: 'lastLoginAt'
};

exports.Prisma.BranchScalarFieldEnum = {
  id: 'id',
  name: 'name',
  address: 'address',
  phone: 'phone',
  email: 'email',
  description: 'description',
  imageUrl: 'imageUrl',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BranchEmployeeScalarFieldEnum = {
  id: 'id',
  branchId: 'branchId',
  employeeId: 'employeeId',
  isMainBranch: 'isMainBranch',
  startDate: 'startDate',
  endDate: 'endDate'
};

exports.Prisma.BranchInventoryScalarFieldEnum = {
  id: 'id',
  branchId: 'branchId',
  productId: 'productId',
  quantity: 'quantity',
  minimumStock: 'minimumStock',
  updatedAt: 'updatedAt'
};

exports.Prisma.ScheduleScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  branchId: 'branchId',
  dayOfWeek: 'dayOfWeek',
  startTime: 'startTime',
  endTime: 'endTime',
  isActive: 'isActive'
};

exports.Prisma.ServiceCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  iconUrl: 'iconUrl',
  displayOrder: 'displayOrder'
};

exports.Prisma.ServiceScalarFieldEnum = {
  id: 'id',
  serviceName: 'serviceName',
  estimatedTime: 'estimatedTime',
  price: 'price',
  description: 'description',
  bannerImageUrl: 'bannerImageUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isActive: 'isActive',
  categoryId: 'categoryId'
};

exports.Prisma.BranchServiceScalarFieldEnum = {
  id: 'id',
  branchId: 'branchId',
  serviceId: 'serviceId',
  price: 'price',
  isActive: 'isActive'
};

exports.Prisma.ServiceStepScalarFieldEnum = {
  id: 'id',
  serviceId: 'serviceId',
  stepOrder: 'stepOrder',
  stepTitle: 'stepTitle',
  stepDescription: 'stepDescription',
  stepImageUrl: 'stepImageUrl'
};

exports.Prisma.BookingScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  employeeId: 'employeeId',
  branchId: 'branchId',
  appointmentDate: 'appointmentDate',
  status: 'status',
  totalPrice: 'totalPrice',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  promotionId: 'promotionId',
  estimatedDuration: 'estimatedDuration',
  checkInTime: 'checkInTime',
  checkOutTime: 'checkOutTime',
  rating: 'rating',
  review: 'review'
};

exports.Prisma.BookingServiceScalarFieldEnum = {
  id: 'id',
  bookingId: 'bookingId',
  serviceId: 'serviceId',
  servicePrice: 'servicePrice'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  bookingId: 'bookingId',
  amount: 'amount',
  paymentMethod: 'paymentMethod',
  paymentStatus: 'paymentStatus',
  provider: 'provider',
  transactionId: 'transactionId',
  paymentDate: 'paymentDate',
  notes: 'notes',
  extraData: 'extraData',
  signature: 'signature',
  requestId: 'requestId',
  responseData: 'responseData',
  updatedAt: 'updatedAt'
};

exports.Prisma.PromotionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  description: 'description',
  discountType: 'discountType',
  discountValue: 'discountValue',
  startDate: 'startDate',
  endDate: 'endDate',
  minimumPurchase: 'minimumPurchase',
  maximumDiscount: 'maximumDiscount',
  usageLimit: 'usageLimit',
  currentUsage: 'currentUsage',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  shortDescription: 'shortDescription',
  brand: 'brand',
  brandSlug: 'brandSlug',
  category: 'category',
  categorySlug: 'categorySlug',
  subcategory: 'subcategory',
  subcategorySlug: 'subcategorySlug',
  price: 'price',
  listedPrice: 'listedPrice',
  cost: 'cost',
  discountPercent: 'discountPercent',
  isDiscount: 'isDiscount',
  quantity: 'quantity',
  minimumStock: 'minimumStock',
  isOutOfStock: 'isOutOfStock',
  imageUrl: 'imageUrl',
  sku: 'sku',
  tags: 'tags',
  ingredients: 'ingredients',
  manual: 'manual',
  ratingScore: 'ratingScore',
  totalSold: 'totalSold',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductImageScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  name: 'name',
  url: 'url',
  alt: 'alt'
};

exports.Prisma.ProductVariantScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  name: 'name',
  price: 'price',
  listedPrice: 'listedPrice',
  sku: 'sku',
  imageUrl: 'imageUrl',
  isDiscount: 'isDiscount',
  discountPercent: 'discountPercent',
  isOutOfStock: 'isOutOfStock'
};

exports.Prisma.InventoryTransactionScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  branchId: 'branchId',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  totalPrice: 'totalPrice',
  transactionDate: 'transactionDate',
  notes: 'notes',
  employeeId: 'employeeId'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  message: 'message',
  isRead: 'isRead',
  createdAt: 'createdAt'
};

exports.Prisma.ExpenseCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description'
};

exports.Prisma.ExpenseScalarFieldEnum = {
  id: 'id',
  title: 'title',
  amount: 'amount',
  expenseDate: 'expenseDate',
  categoryId: 'categoryId',
  branchId: 'branchId',
  notes: 'notes',
  receiptImageUrl: 'receiptImageUrl',
  createdBy: 'createdBy',
  createdAt: 'createdAt'
};

exports.Prisma.CartScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CartItemScalarFieldEnum = {
  id: 'id',
  cartId: 'cartId',
  productId: 'productId',
  quantity: 'quantity',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  password: 'password',
  email: 'email',
  phone: 'phone',
  fullName: 'fullName',
  address: 'address',
  CCCD: 'CCCD',
  avatarUrl: 'avatarUrl'
};

exports.Prisma.BranchOrderByRelevanceFieldEnum = {
  name: 'name',
  address: 'address',
  phone: 'phone',
  email: 'email',
  description: 'description',
  imageUrl: 'imageUrl'
};

exports.Prisma.BranchInventoryOrderByRelevanceFieldEnum = {
  productId: 'productId'
};

exports.Prisma.ServiceCategoryOrderByRelevanceFieldEnum = {
  name: 'name',
  description: 'description',
  iconUrl: 'iconUrl'
};

exports.Prisma.ServiceOrderByRelevanceFieldEnum = {
  serviceName: 'serviceName',
  description: 'description',
  bannerImageUrl: 'bannerImageUrl'
};

exports.Prisma.ServiceStepOrderByRelevanceFieldEnum = {
  stepTitle: 'stepTitle',
  stepDescription: 'stepDescription',
  stepImageUrl: 'stepImageUrl'
};

exports.Prisma.BookingOrderByRelevanceFieldEnum = {
  notes: 'notes',
  review: 'review'
};

exports.Prisma.PaymentOrderByRelevanceFieldEnum = {
  transactionId: 'transactionId',
  notes: 'notes',
  extraData: 'extraData',
  signature: 'signature',
  requestId: 'requestId',
  responseData: 'responseData'
};

exports.Prisma.PromotionOrderByRelevanceFieldEnum = {
  name: 'name',
  code: 'code',
  description: 'description'
};

exports.Prisma.ProductOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  shortDescription: 'shortDescription',
  brand: 'brand',
  brandSlug: 'brandSlug',
  category: 'category',
  categorySlug: 'categorySlug',
  subcategory: 'subcategory',
  subcategorySlug: 'subcategorySlug',
  imageUrl: 'imageUrl',
  sku: 'sku',
  tags: 'tags',
  ingredients: 'ingredients',
  manual: 'manual'
};

exports.Prisma.ProductImageOrderByRelevanceFieldEnum = {
  productId: 'productId',
  name: 'name',
  url: 'url',
  alt: 'alt'
};

exports.Prisma.ProductVariantOrderByRelevanceFieldEnum = {
  productId: 'productId',
  name: 'name',
  sku: 'sku',
  imageUrl: 'imageUrl'
};

exports.Prisma.InventoryTransactionOrderByRelevanceFieldEnum = {
  productId: 'productId',
  notes: 'notes'
};

exports.Prisma.NotificationOrderByRelevanceFieldEnum = {
  title: 'title',
  message: 'message'
};

exports.Prisma.ExpenseCategoryOrderByRelevanceFieldEnum = {
  name: 'name',
  description: 'description'
};

exports.Prisma.ExpenseOrderByRelevanceFieldEnum = {
  title: 'title',
  notes: 'notes',
  receiptImageUrl: 'receiptImageUrl'
};

exports.Prisma.CartOrderByRelevanceFieldEnum = {
  id: 'id'
};

exports.Prisma.CartItemOrderByRelevanceFieldEnum = {
  id: 'id',
  cartId: 'cartId',
  productId: 'productId'
};
exports.Role = exports.$Enums.Role = {
  admin: 'admin',
  receptionist: 'receptionist',
  barber: 'barber',
  customer: 'customer',
  manager: 'manager'
};

exports.UserStatus = exports.$Enums.UserStatus = {
  active: 'active',
  inactive: 'inactive'
};

exports.AvailabilityStatus = exports.$Enums.AvailabilityStatus = {
  available: 'available',
  unavailable: 'unavailable'
};

exports.Status = exports.$Enums.Status = {
  pending: 'pending',
  confirmed: 'confirmed',
  cancelled: 'cancelled',
  in_progress: 'in_progress',
  completed: 'completed',
  success: 'success'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  cash: 'cash',
  credit_card: 'credit_card',
  bank_transfer: 'bank_transfer',
  e_wallet: 'e_wallet',
  momo: 'momo'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  pending: 'pending',
  completed: 'completed',
  failed: 'failed',
  refunded: 'refunded',
  cancelled: 'cancelled'
};

exports.PaymentProvider = exports.$Enums.PaymentProvider = {
  momo: 'momo',
  vnpay: 'vnpay',
  zalopay: 'zalopay',
  other: 'other'
};

exports.PromotionType = exports.$Enums.PromotionType = {
  percentage: 'percentage',
  fixed_amount: 'fixed_amount',
  free_service: 'free_service'
};

exports.Prisma.ModelName = {
  User: 'User',
  Branch: 'Branch',
  BranchEmployee: 'BranchEmployee',
  BranchInventory: 'BranchInventory',
  Schedule: 'Schedule',
  ServiceCategory: 'ServiceCategory',
  Service: 'Service',
  BranchService: 'BranchService',
  ServiceStep: 'ServiceStep',
  Booking: 'Booking',
  BookingService: 'BookingService',
  Payment: 'Payment',
  Promotion: 'Promotion',
  Product: 'Product',
  ProductImage: 'ProductImage',
  ProductVariant: 'ProductVariant',
  InventoryTransaction: 'InventoryTransaction',
  Notification: 'Notification',
  ExpenseCategory: 'ExpenseCategory',
  Expense: 'Expense',
  Cart: 'Cart',
  CartItem: 'CartItem'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
